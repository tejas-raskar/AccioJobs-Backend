id: job_board_daily_workflow
namespace: acciojobs

variables:
  repo_url: "https://github.com/tejas-raskar/AccioJobs-Backend.git"
  clone_dir: "/tmp/acciojobs"
  
tasks:
  - id: fetch_and_process_jobs
    type: io.kestra.plugin.core.flow.WorkingDirectory
    tasks:
      - id: clone_repo
        type: io.kestra.plugin.git.Clone
        url: "https://github.com/tejas-raskar/AccioJobs-Backend.git"
        branch: main

      - id: fetch_jobs
        type: io.kestra.plugin.scripts.python.Script
        taskRunner:
          type: io.kestra.plugin.scripts.runner.docker.Docker
        containerImage: python:3.13.0-bookworm
        beforeCommands:
          - pip install requests beautifulsoup4 feedparser psycopg2-binary
        script: |
            import json
            from scripts.fetch_jobs_api import cleaned_remotive_jobs as api_jobs
            from scripts.fetch_jobs_rss import cleaned_rss_jobs as rss_jobs

            combined_jobs = api_jobs + rss_jobs

            unique_jobs = {}
            for job in combined_jobs:
                key = f"{job['position']}_{job['company']}"
                if key not in unique_jobs:
                    unique_jobs[key] = job

            final_jobs = list(unique_jobs.values())

            with open('jobs.json', 'w') as f:
                json.dump(final_jobs, f)

      - id: find_relevant_jobs
        type: io.kestra.plugin.scripts.python.Script
        taskRunner:
          type: io.kestra.plugin.scripts.runner.docker.Docker
        containerImage: python:3.13.0-bookworm
        beforeCommands:
          - pip install psycopg2-binary
          - ls
        script: |
          import os
          import json
          import psycopg2

          connection_string = "{{secret('DATABASE_URL')}}"
          
          with open('jobs.json', 'r') as f:
              jobs = json.load(f)

          conn = psycopg2.connect(connection_string)
          cur = conn.cursor()

          cur.execute("SELECT position, company FROM jobs")
          existing_jobs = {f"{row[0]}_{row[1]}" for row in cur.fetchall()}

          new_jobs = []
          for job in jobs[:125]:
              job_key = f"{job['position']}_{job['company']}"
              if job_key not in existing_jobs:
                  cur.execute("INSERT INTO jobs (posted_on, company, company_logo, position, category, tags, salary, location, apply_url, description) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING id;", (job['postedOn'], job['company'], job['company_logo'], job['position'], job['category'], job['tags'], job['salary'], job['location'], job['apply_url'], job['description']))
                  job_id = cur.fetchone()[0]
                  new_jobs.append({**job, 'id': job_id})

          if new_jobs:
              cur.execute("SELECT u.id, u.intrested_categories FROM users u")
              users = cur.fetchall()
              
              for user_id, categories in users:
                  user_categories = set(categories)
                  relevant_jobs_for_user = []
                  
                  for job in new_jobs:
                      job_category = job['category']
                      if job_category in user_categories:
                          cur.execute("""
                              INSERT INTO relevant_jobs (user_id, job_id, resume)
                              VALUES (%s, %s, %s)
                              RETURNING id
                          """, (user_id, job['id'], None))  # Setting resume as NULL initially
                          
                          relevant_jobs_for_user.append({
                              'job_id': job['id'],
                              'position': job['position'],
                              'company': job['company']
                          })

                  if relevant_jobs_for_user:
                      print(f"Found {len(relevant_jobs_for_user)} relevant jobs for user {user_id}")

          conn.commit()
          cur.close()
          conn.close()

          with open('new_jobs.json', 'w') as f:
              json.dump(new_jobs, f)

      